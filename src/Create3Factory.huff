// SPDX-License-Indentifier: MIT

/// @author SaTiSH-K-R (https://github.com/SaTiSH-K-R/huff-create3-factory)
/// @author Modified from https://github.com/Vectorized/solady/blob/50cbe1909e773b7e4ba76049c75a203e626d55ba/src/utils/CREATE3.sol
/// @author Modified from SKYBITDev3 (https://github.com/SKYBITDev3/SKYBIT-Keyless-Deployment/blob/main/contracts/SKYBITCREATE3FactoryLite.yul) and written in huff.
/// @notice A factory contract which uses "create3" method to deploy contracts to an address which doesn't effect by the bytecode of the contract.
/// @notice This factory is used to deploy the contracts to the same address in different blockchains.
/// @notice In order to achieve this specific usecase, this contract must be deployed using "Keyless Deployment".
/// @notice This contract can be called with any function name(eg: deploy()) with salt and creation code as arguments.

// Interface
#define function deploy(bytes32 salt, bytes creationCode) payable returns (address contractAddress)

/**
    Proxy Create Factory contract in bytecode form

     * -------------------------------------------------------------------+
     * Opcode      | Mnemonic         | Stack        | Memory             |
     * -------------------------------------------------------------------|
     * 36          | CALLDATASIZE     | cds          |                    |
     * 3d          | RETURNDATASIZE   | 0 cds        |                    |
     * 3d          | RETURNDATASIZE   | 0 0          |                    |
     * 37          | CALLDATACOPY     |              | [0..cds): calldata |
     * 36          | CALLDATASIZE     | cds          | [0..cds): calldata |
     * 3d          | RETURNDATASIZE   | 0 cds        | [0..cds): calldata |
     * 34          | CALLVALUE        | value 0 cds  | [0..cds): calldata |
     * f0          | CREATE           | newContract  | [0..cds): calldata |
     * 3d          | RETURNDATASIZE   | 0 newContract| [0..cds): calldata |
     * 52          | MSTORE           |              | [0..32): contract  |
     * 60 0x20     | PUSH1 0x20       | 0x20         | [0..32): contract  |
     * 3d          | RETURNDATASIZE   | 0 0x20       | [0..32): contract  |
     * f3          | RETURN           |              | [0..32): contract  |
     * -------------------------------------------------------------------|
     * Opcode      | Mnemonic         | Stack        | Memory             |
     * -------------------------------------------------------------------|
     * 6d bytecode | PUSH14 bytecode  | bytecode     |                    |
     * 3d          | RETURNDATASIZE   | 0 bytecode   |                    |
     * 52          | MSTORE           |              | [18..32): bytecode |
     * 60 0x0e     | PUSH1 0x0e       | 0x0e         | [18..32): bytecode |
     * 60 0x12     | PUSH1 0x12       | 0x12 0x0e    | [18..32): bytecode |
     * f3          | RETURN           |              | [18..32): bytecode |
     * -------------------------------------------------------------------+
     */

/* Constants */
#define constant PROXY_FACTORY_BYTECODE = 0x6d363d3d37363d34f03d5260203df33d52600e6012f3

/* Utils */
// Can be used to push zero when return buffer is empty
#define macro RZERO() = takes(0) returns(0) {
    returndatasize
}

/* Macros */

// Check if the proxy contract deployed and reverts with 1 otherwise.
#define macro CHECK_PROXY_DEPLOYMENT() = takes (1) returns (0) {
                                        // [proxy_addr]
    proxy_deployed jumpi                // []
    0x1 RZERO() mstore                  // []
    0x20 RZERO() revert                 // []   Reverting with 1 denotes error at proxy deployment
    proxy_deployed:                     // []
}

// Check if the target contract deployed and reverts with 2 otherwise.
#define macro CHECK_CONTRACT_DEPLOYMENT() = takes (1) returns (0) {
                                        // [bool:success/fail]
    contract_deployed jumpi             // []
    0x2 0x0 mstore                      // []
    0x20 0x0 revert                     // []   Reverting with 2 denotes error at contract deployment
    contract_deployed:                  // []
}

#define macro DEPLOY_PROXY_FACTORY() = takes (0) returns (1) {
    // create2(value, code_offset, code_size, salt)

    // -> store proxy bytecode in memory at 0
    [PROXY_FACTORY_BYTECODE]            // [bytecode]
    RZERO() mstore                      // []

    // -> sha3(offset_mem, size)
    // -> store caller in memory at 32 and salt at 64
    caller 0x20 mstore                  // []
    0x4 calldataload                    // [salt]
    0x40 mstore                         // []
    0x60 0x2c sha3                      // [salt]            Updated salt with keccak256(caller(),salt) to protect from front-running

    0x16 0x0a RZERO()                   // [0, 10, 22, salt]
    create2                             // [proxy_addr]

    dup1                                // [proxy_addr, proxy_addr]
    CHECK_PROXY_DEPLOYMENT()            // [proxy_addr]
}

#define macro DEPLOY_CONTRACT() = takes (1) returns (1) {
    // call(gas, address, value, argsOffset, argsSize, returnOffset, returnSize)

                                        // [proxy_addr]
    0x20 RZERO()                        // [ret_offset, ret_size, proxy_addr]
    0x44 calldataload                   // [creation_code_len, ret_offset, ret_size, proxy_addr]
    dup1 0x64 RZERO() calldatacopy      // [creation_code_len, ret_offset, ret_size, proxy_addr]
    RZERO()                             // [creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    callvalue                           // [value, creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    dup6                                // [proxy_addr, value, creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    gas                                 // [gas, proxy_addr, value, creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    call                                // [bool:success, proxy_addr]
    CHECK_CONTRACT_DEPLOYMENT()         // [proxy_addr]
}

#define macro DEPLOY() = takes (0) returns (0) {
    DEPLOY_PROXY_FACTORY()              // [proxy_addr]
    DEPLOY_CONTRACT()                   // [proxy_addr]
    0x20 0x0 return
}

#define macro MAIN() = takes(0) returns(0) {
    DEPLOY()
}