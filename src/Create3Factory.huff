/// @author SaTiSH-K-R (https://github.com/SaTiSH-K-R/huff-create3-factory)
/// @author Modified from Solady (https://github.com/Vectorized/solady) and rewritten in Huff

/* Interface */
#define function deploy(bytes32,bytes) payable returns () 
#define function getDeterministicAddress(bytes32) view returns (address)

/**
    Proxy Create Factory contract in bytecode form

     * -------------------------------------------------------------------+
     * Opcode      | Mnemonic         | Stack        | Memory             |
     * -------------------------------------------------------------------|
     * 36          | CALLDATASIZE     | cds          |                    |
     * 3d          | RETURNDATASIZE   | 0 cds        |                    |
     * 3d          | RETURNDATASIZE   | 0 0          |                    |
     * 37          | CALLDATACOPY     |              | [0..cds): calldata |
     * 36          | CALLDATASIZE     | cds          | [0..cds): calldata |
     * 3d          | RETURNDATASIZE   | 0 cds        | [0..cds): calldata |
     * 34          | CALLVALUE        | value 0 cds  | [0..cds): calldata |
     * f0          | CREATE           | newContract  | [0..cds): calldata |
     * -------------------------------------------------------------------|
     * Opcode      | Mnemonic         | Stack        | Memory             |
     * -------------------------------------------------------------------|
     * 67 bytecode | PUSH8 bytecode   | bytecode     |                    |
     * 3d          | RETURNDATASIZE   | 0 bytecode   |                    |
     * 52          | MSTORE           |              | [0..8): bytecode   |
     * 60 0x08     | PUSH1 0x08       | 0x08         | [0..8): bytecode   |
     * 60 0x18     | PUSH1 0x18       | 0x18 0x08    | [0..8): bytecode   |
     * f3          | RETURN           |              | [0..8): bytecode   |
     * -------------------------------------------------------------------+
     */

/* Constants */
#define constant PROXY_CREATE_FACTORY_BYTECODE = 0x67363d3d37363d34f03d5260086018f3
#define constant PROXY_CREATE_FACTORY_BYTECODE_HASH = 0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f

/* Errors */
#define error TargetAlreadyExists()
#define error ErrorProxyDeployment()
#define error ErrorContractDeployment()
#define error InvalidSalt()

/* Macros */

#define macro CHECK_SALT() = takes (1) returns (0) {
                                        // [salt]
    valid_salt jumpi                    // []
    __ERROR(InvalidSalt)                // [error-sig]
    0x0 mstore                          // []
    0x20 0x0 return
    valid_salt:                         // []
}

#define macro CHECK_PROXY_DEPLOYMENT() = takes (1) returns (0) {
                                        // [proxy_addr]
    proxy_deployed jumpi                // []
    __FUNC_SIG(ErrorProxyDeployment)    // [error_sig]
    0x0 mstore                          // []
    0x4 0x0 revert                      // []
    proxy_deployed:                     // []
}

#define macro DEPLOY_PROXY_FACTORY() = takes (0) returns (0) {
    [PROXY_CREATE_FACTORY_BYTECODE]     // [bytecode]
    0x0 mstore                          // []
    0x4 calldataload                    // [salt]
    0x10 0x10 0x00                      // [0, 16, 16, salt]
    create2                             // [proxy_addr]
    dup1                                // [proxy_addr, proxy_addr]
    CHECK_PROXY_DEPLOYMENT()            // [proxy_addr]
}

#define macro CHECK_CONTRACT_DEPLOYMENT() = takes (1) returns (0) {
                                        // [bool:success/fail]
    contract_deployed jumpi             // []
    __FUNC_SIG(ErrorContractDeployment) // [error_sig]
    0x0 mstore                          // []
    0x4 0x0 revert                      // []
    contract_deployed:                  // []
}

#define macro DEPLOY_CONTRACT() = takes (1) returns (0) {
                                        // [proxy_addr]
    0x0 0x0                             // [ret_offset, ret_size, proxy_addr]
    0x44 calldataload                   // [creation_code_len, ret_offset, ret_size, proxy_addr]
    dup1 0x64 0x0 calldatacopy          // [creation_code_len, ret_offset, ret_size, proxy_addr]
    0x0                                 // [creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    callvalue                           // [value, creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    dup6                                // [address, value, creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    gas                                 // [gas, address, value, creation_code_offset, creation_code_len, ret_offset, ret_size, proxy_addr]
    call                                // [bool:success, proxy_addr]
    CHECK_CONTRACT_DEPLOYMENT()         // []
    pop                                 // [bool:success]
}

#define macro GET_ADDRESS() = takes (1) returns (1) {
                                        // [salt]
    dup1                                // [salt, salt]
    CHECK_SALT()                        // [salt]
    0xff 0xf8 shl 0x0 mstore            // [salt]
    address 0x60 shl 0x1 mstore         // [salt]
    0x15 mstore                         // []
    [PROXY_CREATE_FACTORY_BYTECODE_HASH]// [bytecode_hash]
    0x35 mstore                         // []
    0x55 0x0 sha3                       // [hash]
    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff
                                        // [0x00....111, hash]
    and                                 // [addr]
    0xd694 0xf0 shl 0x0 mstore          // [addr]
    0x60 shl 0x2 mstore                 // []
    0x01 0xf8 shl 0x16 mstore           // []
    0x17 0x0 sha3                       // [hash]
    0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff
                                        // [0x00....111, hash]
    and                                 // [addr]
}

/* Function macros */

#define macro DEPLOY() = takes (0) returns (0) {
    0x4 calldataload                    // [salt]
    GET_ADDRESS()                       // [addr]
    extcodesize                         // [target_code_size]
    iszero continue_deploy jumpi        // []
        __ERROR(TargetAlreadyExists)    // [error_sig]
        0x0 mstore                      // []
        0x4 0x0 revert                  // []
    continue_deploy:
    DEPLOY_PROXY_FACTORY()              // [proxy_addr]
    DEPLOY_CONTRACT()                   // []
    0x0 0x0 return
}

#define macro GET_DETERMINISTIC_ADDRESS() = takes (0) returns(0) {
    0x4 calldataload                    // [salt]
    GET_ADDRESS()                       // [addr]
    0x0 mstore                          // []
    0x20 returndatasize                 // [0, 32]
    return                              // []
}

#define macro MAIN() = takes(0) returns(0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(deploy) eq deployMacro jumpi
    dup1 __FUNC_SIG(getDeterministicAddress) eq getAddressMacro jumpi

    0x00 0x00 revert

    /* Dispatchers */
    deployMacro:
        DEPLOY()
    getAddressMacro:
        GET_DETERMINISTIC_ADDRESS()
}